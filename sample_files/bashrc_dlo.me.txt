#!bash
#
# My personally optimized bashrc. I use Mac OS X 10.6. If you use Linux, you
# may need to make some minor modifications.
#
# Copyright (C) 2007-2011 Dan Loewenherz <dan@dlo.me>
#
# Emmanuel Rouat <emmanuel.rouat@wanadoo.fr> is to thank for a lot of this
# bashrc.

if [ "$OSTYPE" > "darwin" ]; then
    if [ -f `brew --prefix`/etc/bash_completion ]; then
        . `brew --prefix`/etc/bash_completion
    fi

    # Only set these if Go is installed
    if [ -d `brew --prefix`/Celler/go ]; then
        export GOROOT=`brew --cellar`/go/HEAD
        export GOBIN=/usr/local/bin
        export GOARCH=amd64
        export GOOS=darwin
    fi

    export JAVA_HOME=$(/usr/libexec/java_home)
fi

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

#    _   _ _                    
#   /_\ | (_) __ _ ___  ___ ___ 
#  //_\\| | |/ _` / __|/ _ | __|
# /  _  \ | | (_| \__ \  __|__ \
# \_/ \_/_|_|\__,_|___/\___|___/


alias l='ls -alF'
alias la='ls -Fa'
alias ld='ls -al -d * | egrep "^d"' # only subdirectories
alias lt='ls -alt | head -20' # recently changed files

alias md='mkdir -p'
alias ..='cd ..'
alias ...='cd ../..'

# Automatically push a new directory to the stack when changing directories by
# using '+' instead of cd
alias +='pushd'

# Git aliases
# A lot of single letters. Yes, my workflow is very DVCS-centric.
alias push='git push'
alias s='git s'
alias pull='git pull'
alias ci='git ci'
alias lg='git lg'
alias add='git add'
alias d='git d'
alias dc='git dc'
alias st='git stash'
alias sp='git sp'
alias pom='git pom'
alias pum='git pum'
alias clone='git clone'
alias co='git co'
alias cot='git cot'
alias b='git b'
alias tree='tree -Csu'

# You should never need to do this, but some of us are forced to ;)
alias dcommit='git svn dcommit'

# Compilation
alias c='./configure'
alias smi='sudo make install'

#    __             _                                      _   
#   /__\_ ____   __(_)_ __ ___  _ __  _ __ ___   ___ _ __ | |_ 
#  /_\ | '_ \ \ / /| | '__/ _ \| '_ \| '_ ` _ \ / _ \ '_ \| __|
# //__ | | | \ V / | | | | (_) | | | | | | | | |  __/ | | | |_ 
# \__/ |_| |_|\_/  |_|_|  \___/|_| |_|_| |_| |_|\___|_| |_|\__|

# Hide these special things in a safe file
if [ -f $HOME/.ec2-vars ]; then
    . $HOME/.ec2-vars
fi

# Quick access to nginx directory
export NGINX_CONF=/usr/local/nginx/conf/sites-enabled/

#    ___                  _   _                 
#   / __\_   _ _ __   ___| |_(_) ___  _ __  ___ 
#  / _\ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
# / /   | |_| | | | | (__| |_| | (_) | | | \__ \
# \/     \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

# My little shortcut for committing files
# git commit -m "this is a commit" ==> cim this is a commit
function cim() {
  command git commit -m "$*"
}

# Makes extraction easier
function extract() {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# Nice shortcut for finding files and executing commands on them
# E.g. `fe pyc rm`
function fe() {
  find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ;
}

#    ___                       _      _   _                 
#   / __\ ___  _ __ ___  _ __ | | ___| |_(_) ___  _ __  ___ 
#  / /   / _ \| '_ ` _ \| '_ \| |/ _ \ __| |/ _ \| '_ \/ __|
# / /___| (_) | | | | | | |_) | |  __/ |_| | (_) | | | \__ \
# \____/ \___/|_| |_| |_| .__/|_|\___|\__|_|\___/|_| |_|___/
#                       |_|           
#
# These are some of my faves. I also have installed the bash_completion scripts
# from homebrew, in addition to some project-specific ones.
#
# * General, http://bash-completion.alioth.debian.org/
# * Homebrew, https://github.com/mxcl/homebrew/raw/master/Library/Contributions/brew_bash_completion.sh
# * Git, https://github.com/git/git/raw/master/contrib/completion/git-completion.bash
# * Django, https://github.com/django/django/raw/master/extras/django_bash_completion
# Rails doesn't have a good one.

complete -A user su mail finger

# Compression autcompletions
complete -f -o default -X '*.+(zip|ZIP)'  zip
complete -f -o default -X '!*.+(zip|ZIP)' unzip
complete -f -o default -X '*.+(z|Z)'      compress
complete -f -o default -X '!*.+(z|Z)'     uncompress
complete -f -o default -X '*.+(gz|GZ)'    gzip
complete -f -o default -X '!*.+(gz|GZ)'   gunzip tar
complete -f -o default -X '*.+(bz2|BZ2)'  bzip2
complete -f -o default -X '!*.+(bz2|BZ2)' bunzip2
complete -f -o default -X '!*.+(zip|ZIP|z|Z|gz|GZ|bz2|BZ2)' extract

# For these languages, only complete with corresponding filenames
complete -f -X '!*.py' python
complete -f -X '!*.rb' ruby
complete -f -X '!*.pl' perl

#    ___       _   _                 
#   /___\_ __ | |_(_) ___  _ __  ___ 
#  //  // '_ \| __| |/ _ \| '_ \/ __|
# / \_//| |_) | |_| | (_) | | | \__ \
# \___/ | .__/ \__|_|\___/|_| |_|___/
#       |_|                          

# Wrap lines correctly after resizing them
shopt -s checkwinsize

# Fix typos when changing into directories
shopt -s cdspell

# Check a command is in the hash table before executing it
shopt -s checkhash

# Don't waste time completing when line is empty
shopt -s no_empty_cmd_completion

# Expand filenames beginning with period
shopt -s dotglob

# globstar doesn't exist in bash 3.2
if [ ${BASH_VERSINFO[0]} -gt 4 ]; then
    # Set recursive globbing with **
    shopt -s globstar
fi

# No new mail notifications
shopt -u mailwarn
unset MAILCHECK

# let's you do things like
# export s=/etc
# cd s
shopt -s cdable_vars

# Use vi keybindings
set -o vi

#  _____ _              ___                           _   
# /__   \ |__   ___    / _ \_ __ ___  _ __ ___  _ __ | |_ 
#   / /\/ '_ \ / _ \  / /_)/ '__/ _ \| '_ ` _ \| '_ \| __|
#  / /  | | | |  __/ / ___/| | | (_) | | | | | | |_) | |_ 
#  \/   |_| |_|\___| \/    |_|  \___/|_| |_| |_| .__/ \__|
#                                              |_|        
# Last but not least.

# Only use git prompt if git bash completion is installed.
if [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
    export GIT_PS1_SHOWDIRTYSTATE="true"
    export GIT_PS1_SHOWSTASHSTATE="true"
    export GIT_PS1_SHOWUNTRACKEDFILES="true"
    export GIT_PS1_SHOWUPSTREAM="verbose"

    PS1='$(__git_ps1 "|\[\033[1;33m\]%s\[\033[0m\]| ")\[\033[1;36m\]\W\[\033[0m\]\[\033[1m\] \$\[\033[0m\] '
else
    PS1='\e[1;36m\]\W\e[0m\] \e[1m\]\$\e[0m\] '
fi

export HISTFILESIZE=10000 # Record last 10,000 commands
export HISTSIZE=10000 # Record last 10,000 commands per sessio

export TERM=screen-256color

export EC2_PRIVATE_KEY="$(/bin/ls $HOME/.ec2/pk-*.pem)"
export EC2_CERT="$(/bin/ls $HOME/.ec2/cert-*.pem)"
export EC2_HOME="/usr/local/Cellar/ec2-api-tools/1.4.2.2/jars"

# Node executables. This may be outdated, I haven't used Node in a few weeks. =D
if [ -d /usr/local/share/npm/bin ]; then
    export PATH=$PATH:/usr/local/share/npm/bin
fi

if [ -f ~/.bashrc-local ]; then
    source ~/.bashrc-local
fi

